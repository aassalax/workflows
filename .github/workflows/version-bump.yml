name: Auto Version & Tag

on:
  push:
    tags:
      - stable

permissions:
  contents: write
  pull-requests: read

jobs:
  auto_version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # important pour voir les anciens tags

      - name: Set up Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Install GitHub CLI
        uses: cli/cli-action@v2

      - name: Compute next version
        id: version
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}  # ← ton token PAT orga ici
        run: |
          # Get last tag or default to v0.0.0
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "🔖 Dernier tag: $LAST_TAG"

          # Extract version parts
          VERSION=${LAST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          # Get PRs closed since last tag
          TAG_DATE=$(git log -1 --format=%cI "$LAST_TAG")
          LABELS=$(gh pr list --search "is:merged merged:>$TAG_DATE" --json labels --jq '.[].labels[].name')

          echo "📦 Labels trouvés: $LABELS"

          BUMP="patch"
          if echo "$LABELS" | grep -q "breaking-change"; then
            BUMP="major"
          elif echo "$LABELS" | grep -q "feature"; then
            BUMP="minor"
          fi

          # Increment version
          if [[ "$BUMP" == "major" ]]; then
            ((MAJOR+=1)); MINOR=0; PATCH=0
          elif [[ "$BUMP" == "minor" ]]; then
            ((MINOR+=1)); PATCH=0
          else
            ((PATCH+=1))
          fi

          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "🆕 Nouvelle version: $NEW_VERSION"

          echo "new_tag=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      - name: Create and push tag
        env:
          TAG_NAME: ${{ steps.version.outputs.new_tag }}
        run: |
          git tag "$TAG_NAME"
          git push origin "$TAG_NAME"

name: Auto Version & Tag

on:
  workflow_call:
    secrets:
      PAT_TOKEN:
        required: false

permissions:
  contents: write
  pull-requests: read

jobs:
  auto_version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important pour récupérer tous les tags

      - name: Configure Git identity
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Compute next version from PR labels
        id: version
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          # Récupérer le dernier tag sémantique (vX.Y.Z) ou v0.0.0 si aucun
          LAST_TAG=$(git tag --list "v*" --sort=-v:refname | head -n1 || echo "v0.0.0")

          # Vérifier que le tag a bien le format vX.Y.Z, sinon fallback
          if [[ ! "$LAST_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            LAST_TAG="v0.0.0"
          fi

          echo "Dernier tag: $LAST_TAG"

          # Vérifier que le tag existe réellement, sinon fixer une date ancienne
          if git rev-parse "$LAST_TAG" >/dev/null 2>&1; then
            TAG_DATE=$(git log -1 --format=%cI "$LAST_TAG")
          else
            TAG_DATE="1970-01-01T00:00:00Z"
          fi

          echo "Date du dernier tag: $TAG_DATE"

          # Nettoyer le "v" et séparer la version
          VERSION=${LAST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          # Authentification avec gh CLI
          echo "$GH_TOKEN" | gh auth login --with-token

          # Lister les labels des PRs mergées depuis la date du dernier tag
          LABELS=$(gh pr list --state merged --search "merged:>$TAG_DATE" --json labels --jq '.[].labels[].name' || echo "")

          echo "Labels détectés: $LABELS"

          BUMP="patch"
          if echo "$LABELS" | grep -q "breaking-change"; then
            BUMP="major"
          elif echo "$LABELS" | grep -q "feature"; then
            BUMP="minor"
          fi

          echo "Incrément: $BUMP"

          # Calcul de la nouvelle version
          if [[ "$BUMP" == "major" ]]; then
            ((MAJOR+=1)); MINOR=0; PATCH=0
          elif [[ "$BUMP" == "minor" ]]; then
            ((MINOR+=1)); PATCH=0
          else
            ((PATCH+=1))
          fi

          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "Nouvelle version: $NEW_VERSION"
          echo "new_tag=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      - name: Create and push new tag
        env:
          TAG_NAME: ${{ steps.version.outputs.new_tag }}
        run: |
          git tag "$TAG_NAME"
          git push origin "$TAG_NAME"

      - name: Trigger Publish Release workflow dispatch
        if: ${{ steps.version.outputs.new_tag != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          WORKFLOW_FILE: release-kt.yml
          TAG_NAME: ${{ steps.version.outputs.new_tag }}
        run: |
          echo "Déclenchement manuel du workflow Publish Release pour le tag $TAG_NAME"
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            https://api.github.com/repos/$REPO/actions/workflows/$WORKFLOW_FILE/dispatches \
            -d "{\"ref\":\"refs/tags/$TAG_NAME\"}"

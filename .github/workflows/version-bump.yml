name: Auto Version & Tag

on:
  workflow_call:
    secrets:
      PAT_TOKEN:
        required: false

permissions:
  contents: write
  pull-requests: read

jobs:
  auto_version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important pour récupérer tous les tags

      - name: Configure Git identity
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Compute next version from PR labels
        id: version
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          # Pas besoin de faire 'gh auth login' dans GitHub Actions

          LAST_TAG=$(git tag --list "v*" --sort=-v:refname | head -n1 || echo "v0.0.0")

          if [[ ! "$LAST_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            LAST_TAG="v0.0.0"
          fi

          echo "Dernier tag: $LAST_TAG"

          if git rev-parse "$LAST_TAG" >/dev/null 2>&1; then
            TAG_DATE=$(git log -1 --format=%cI "$LAST_TAG")
          else
            TAG_DATE="1970-01-01T00:00:00Z"
          fi

          echo "Date du dernier tag: $TAG_DATE"

          LABELS=$(gh pr list --state merged --search "merged:>$TAG_DATE" --json labels --jq '.[].labels[].name' || echo "")

          echo "Labels détectés: $LABELS"

          BUMP="patch"
          if echo "$LABELS" | grep -q "breaking-change"; then
            BUMP="major"
          elif echo "$LABELS" | grep -q "feature"; then
            BUMP="minor"
          fi

          echo "Incrément: $BUMP"

          IFS='.' read -r MAJOR MINOR PATCH <<< "${LAST_TAG#v}"

          if [[ "$BUMP" == "major" ]]; then
            ((MAJOR+=1)); MINOR=0; PATCH=0
          elif [[ "$BUMP" == "minor" ]]; then
            ((MINOR+=1)); PATCH=0
          else
            ((PATCH+=1))
          fi

          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "Nouvelle version: $NEW_VERSION"
          echo "new_tag=$NEW_VERSION" >> "$GITHUB_OUTPUT"
      

      - name: Create and push new tag
        env:
          TAG_NAME: ${{ steps.version.outputs.new_tag }}
        run: |
          git tag "$TAG_NAME"
          git push origin "$TAG_NAME"

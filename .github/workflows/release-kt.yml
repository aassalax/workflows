name: Publish Release

on:
  workflow_call:
    secrets:
      PAT_TOKEN:
        required: false

permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important pour r√©cup√©rer tous les tags

      - name: Configure Git identity
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Compute next version from PR labels
        id: version
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LAST_TAG=$(git tag --list "v*" --sort=-v:refname | head -n1 || echo "v0.0.0")

          if [[ ! "$LAST_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            LAST_TAG="v0.0.0"
          fi

          echo "Dernier tag: $LAST_TAG"

          if git rev-parse "$LAST_TAG" >/dev/null 2>&1; then
            TAG_DATE=$(git log -1 --format=%cI "$LAST_TAG")
          else
            TAG_DATE="1970-01-01T00:00:00Z"
          fi

          echo "Date du dernier tag: $TAG_DATE"

          LABELS=$(gh pr list --state merged --search "merged:>$TAG_DATE" --json labels --jq '.[].labels[].name' || echo "")

          echo "Labels d√©tect√©s: $LABELS"

          BUMP="patch"
          if echo "$LABELS" | grep -q "breaking-change"; then
            BUMP="major"
          elif echo "$LABELS" | grep -q "feature"; then
            BUMP="minor"
          fi

          echo "Incr√©ment: $BUMP"

          IFS='.' read -r MAJOR MINOR PATCH <<< "${LAST_TAG#v}"

          if [[ "$BUMP" == "major" ]]; then
            ((MAJOR+=1)); MINOR=0; PATCH=0
          elif [[ "$BUMP" == "minor" ]]; then
            ((MINOR+=1)); PATCH=0
          else
            ((PATCH+=1))
          fi

          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "Nouvelle version: $NEW_VERSION"
          echo "new_tag=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      - name: Create and push new tag
        env:
          TAG_NAME: ${{ steps.version.outputs.new_tag }}
        run: |
          git tag "$TAG_NAME"
          git push origin "$TAG_NAME"

      - name: Get release notes from draft
        id: draft_release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = process.env.TAG_NAME;
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const draft = releases.find(r => r.draft);
            if (!draft) {
              core.setFailed('‚ùå Aucun draft trouv√©.');
              return;
            }

            core.setOutput('release_body', draft.body);
            core.setOutput('draft_id', draft.id);
        env:
          TAG_NAME: ${{ steps.version.outputs.new_tag }}

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.new_tag }}
          name: "üöÄ ${{ steps.version.outputs.new_tag }}"
          body: ${{ steps.draft_release.outputs.release_body }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete draft release
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const releaseId = ${{ steps.draft_release.outputs.draft_id }};
            await github.rest.repos.deleteRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
            });

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build with Gradle
        run: ./gradlew build

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          VERSION="${{ steps.version.outputs.new_tag }}"
          IMAGE="ghcr.io/${{ github.repository }}"

          echo "üîß Building Docker image: $IMAGE:$VERSION"
          docker build -t "$IMAGE:$VERSION" .
          docker tag "$IMAGE:$VERSION" "$IMAGE:latest"
          docker push "$IMAGE:$VERSION"
          docker push "$IMAGE:latest"

      - name: Cleanup main-* tags from GHCR
        if: success()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IMAGE: ${{ github.repository }}
        run: |
          echo "::add-mask::$GH_TOKEN"
          echo "üîç Looking for main-* tags in ghcr.io/$IMAGE"

          sudo apt-get update -qq && sudo apt-get install -y -qq gh jq

          gh auth status || true

          gh api -H "Accept: application/vnd.github+json" \
            "/orgs/${IMAGE%%/*}/packages/container/${IMAGE#*/}/versions" > versions.json

          TAGS=$(jq -r '.[] | select(.metadata.container.tags[] | startswith("main-")) | [.id, .metadata.container.tags[]] | @tsv' versions.json)

          if [ -z "$TAGS" ]; then
            echo "‚úÖ Aucun tag main-* trouv√©."
            exit 0
          fi

          echo "$TAGS" | while IFS=$'\t' read -r id tag; do
            echo "üóëÔ∏è Suppression du tag: $tag (version ID: $id)"
            gh api --method DELETE "/orgs/${IMAGE%%/*}/packages/container/${IMAGE#*/}/versions/$id"
          done

          echo "‚úÖ Cleanup termin√©."
